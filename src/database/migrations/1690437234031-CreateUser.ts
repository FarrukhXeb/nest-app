import { faker } from '@faker-js/faker';
import { hash } from 'bcryptjs';
import { MigrationInterface, QueryRunner } from 'typeorm';

export class CreateUser1690437234031 implements MigrationInterface {
  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`
      CREATE TABLE "user" (
        "id" int GENERATED BY DEFAULT AS IDENTITY NOT NULL,
        "email" character varying(255) NOT NULL,
        "password" character varying(255) NOT NULL,
        "firstName" character varying(255) NOT NULL,
        "lastName" character varying(255),
        "profileImage" character varying(255),
        "createdAt" date NOT NULL DEFAULT now(),
        "updatedAt" date NOT NULL DEFAULT now(),
        "roleId" integer NOT NULL,
        CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3" UNIQUE ("email"),
        CONSTRAINT "PK_cace4a159ff9f2512dd42373760" PRIMARY KEY ("id"),
        CONSTRAINT "FK_c28e52f758e7bbc53828db92194" FOREIGN KEY ("roleId") REFERENCES "role"("id")
      )
    `);
    const password = await hash('testing1234', 12);
    await queryRunner.query(`
      INSERT INTO "user" ("email", "password", "firstName", "roleId")
      VALUES
        ('admin@example.com', '${password}', 'Super Admin', 1),
        ('${faker.internet.email()}', '${password}', '${faker.person.firstName()}', 2),
        ('${faker.internet.email()}', '${password}', '${faker.person.firstName()}', 2),
        ('${faker.internet.email()}', '${password}', '${faker.person.firstName()}', 2),
        ('${faker.internet.email()}', '${password}', '${faker.person.firstName()}', 2),
        ('${faker.internet.email()}', '${password}', '${faker.person.firstName()}', 2),
        ('${faker.internet.email()}', '${password}', '${faker.person.firstName()}', 2),
        ('${faker.internet.email()}', '${password}', '${faker.person.firstName()}', 2),
        ('${faker.internet.email()}', '${password}', '${faker.person.firstName()}', 2),
        ('${faker.internet.email()}', '${password}', '${faker.person.firstName()}', 2)
    `);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    // Drop foreign key constraint from "user" table
    const table = await queryRunner.getTable('user');
    console.log(table);
    const foreignKey = table.foreignKeys.find(
      (fk) => fk.columnNames.indexOf('roleId') !== -1,
    );
    if (foreignKey) {
      await queryRunner.dropForeignKey('user', foreignKey);
    }
    await queryRunner.dropTable('user');
  }
}
